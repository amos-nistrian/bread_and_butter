https://gist.github.com/TSiege/cbb0507082bb18ff7e4b


SORTS
	Quick Sort (java uses in Arrays.sort())
		(Move everything around element )
		Quick sort picks a random element from the dataset as the pivot element, then sorts all elements smaller before that and all greater than the pivot after it.
		Then quicksort is executed on the part left of the pivot and right of it.
		- Not stable
		- O(lg n) space complexity bc of recurrsive calls on the stack frame
		https://www.geeksforgeeks.org/quick-sort/

	Merge Sort
		https://www.geeksforgeeks.org/merge-sort/
		-Needs 
		-Stable
		-Space complexity O(n), Good Explanation: https://www.quora.com/Algorithms-How-does-merge-sort-have-space-complexity-O-n-for-worst-case

	Insertion Sort
		hand of cards sort
		-stable yes
		-worst case is reversely sorted array make n-1, n-2, n-3,... n^2 time complexity
		-average case is O(n^2)
		-Best case is O(n), an array thats already sorted
		-space is O(1) because its constant since you use the same array


	Bubble Sort
		(adjacent comparitive sort) -- buuble the bggest numbers to end of array
		if left > right, swap else left pointer = right pointer, right pointer = next
		https://www.geeksforgeeks.org/bubble-sort/
		-best case - O(n) already sorted 
		-average case - O(n^2)
		-worst cast - O(n^2)
		-stable yes
		-space O(1)


TREE DATA STRUCTURES
	Binary Search Tree
		- tree is build from array, order of the array builds different looking trees
		- left child is smaller than root right child is greater or equal to root
		- show WORST CASE Tree: tree is built from a sorted array (sorted array)-> [7, 8, 13, 14, 21]
			access
			search   O(n)
			insert 
			delete -- look up how to do this
		- show AVERAGE CASE tree 
			access a leaf
			search for a leaf   O(lg (n))
			insert a leaf (how to insert in BST, its just like search, newly inserted as a leaf always)
			delete a leaf (3 cases: deleting leaf, deleting node with 1 child, deleting node with both l/r children then you replace the node you want to delete with the next smallest in the nodes right subtree)
		- Space complexity at worst for both cases is O(n) a tree with n nodes
		- if you want to check if a /bst is in sorted order, do an inorder traversal
		- height of BST is length of longest path from root to leaf
	
	
	Max/Min Heap
		-root is smallest
		-the parent of a node must be smaller than the values of all its children
		-siblings have no relation.

		-insert O(lg n) insert at bottom of heap and move it up till it no longer violates the heap
		-delete O(lg n) remove the root, take last leaf and make it root then heapify to satisfy the
			the heap poperties
		-min/max O(1) 
		https://www.google.com/imgres?imgurl=https://algs4.cs.princeton.edu/24pq/images/heap-ops.png&imgrefurl=https://algs4.cs.princeton.edu/24pq/&h=394&w=537&tbnid=yfIBcl75Daia0M:&tbnh=154&tbnw=211&usg=__BuswbQ8b5Sd0f7YxmBHfDfEst7s%3D&vet=10ahUKEwjXxej1vbXZAhVLzWMKHSLxAOMQ9QEILTAA..i&docid=IfdCGHZK8m7myM&sa=X&ved=0ahUKEwjXxej1vbXZAhVLzWMKHSLxAOMQ9QEILTAA

	BALANCED BINARY SEARCH TREES
		AVL Tree or Height Balanced Tree 
			-It is a variation of the Binary tree where height difference between left and right sub tree can be at most 1. If at any time they differ by more than one, rebalancing is done to restore this property. 
			- height of a node is the longest path DOWN to a leaf node.
			- height of a node is the greater of the left/right childrens height + 1 
			-Lookup, insertion, and deletion all take O(lg (n)) time in both the average and worst cases, where n is the number of nodes in the tree prior to the operation.
			- TO insert do simple BST insert then fix AVL balance

			-insert O(lg (n))
			-delete O(lg (n))
			-predecessor/successor (next large/smaller) O(lg (n))

			when you insert or delete you need to rebalance
			show how to insert with both cases using left and right rotate
			https://www.youtube.com/watch?v=FNeL18KsWPc#t=29m02s
			https://www.youtube.com/watch?v=FNeL18KsWPc#t=35m40s
			https://www.youtube.com/watch?v=FNeL18KsWPc#t=37m15s

		Splay Tree
			A splay tree is a self-adjusting binary search tree with the additional property that recently accessed elements are quick to access again. All normal operations on a binary search tree are combined with one basic operation, called splaying. Splaying the tree for a certain element rearranges the tree so that the element is placed at the root of the tree.

			- all operations O(lg n) average time complexity
			- all operations O(n) worst case time complexity

			- find: works just like BST find, then you splay that node up to the root
			- min/max: works just like BST min, keep going left/right, then splay that node up to the 	root
			-insert: works just like BST insert, then you splay that node up to the root.
			-remove: https://www.youtube.com/watch?v=8Zs1lj_bUV0#t=39m46s


SEARCHES TREES AND GRAPHS
	Depth-First-Search & Breadth-First-Search
		Traverse order
			pre: root,L,R
			in-order: L,root,R
			post-order: L,R,root
		Advantages & Disadvanteges of each search
		(https://www.kirupa.com/developer/actionscript/depth_breadth_search7.htm)
	Breadth-First-Search
		- use when tree is wide (img example)(https://www.kirupa.com/developer/actionscript/images/exampleGraphTut.gif)
	Depth-First-Search
		- use when tree is taller than it is wide (img example)(https://www.kirupa.com/developer/actionscript/images/exampleGraphTut.gif)
	

	SHORTEST PATHS
	Dijkstra
		you pick a "source" node and it finds shortest paths from the source to all other nodes in the graph, producing a shortest-path tree.
		-works on directed and undirected graphs without negative edges
			https://www.geeksforgeeks.org/greedy-algorithms-set-6-dijkstras-shortest-path-algorithm/
			https://www.youtube.com/watch?v=pVfj6mxhdMw#t=9m58s

			-use a min heap to store nodes
			-node contains its key, distance from source, and previous vertex
			-store unvisited vertexs in an array, as you visit a vertex remove it from this array
			
	Bellman-Ford
		-works on directed graphs with negative edges which may result in negative cycles
		https://www.hackerearth.com/practice/algorithms/graphs/shortest-path-algorithms/tutorial/
		https://www.youtube.com/watch?v=ozsuci5pIso
		-cycles through all vertices and if that vertices has a distance that is not infinity it checks its edges and updates any other conected vertices distances.
		-running time is O(ve)


BITWISE
	XOR
	AND
	OR


OTHER DATA STRUCTURES when to use them
	Hashmap/Dictionary
	Linked-List
	Array
	ArrayList
	set


RECURSION

ARRAY AND STRING PROBLEMS
http://javarevisited.blogspot.sg/2015/06/top-20-array-interview-questions-and-answers.html